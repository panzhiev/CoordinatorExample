package com.panzhiev.coordinatorexample

import android.graphics.Color
import android.graphics.Point
import android.graphics.drawable.GradientDrawable
import android.os.Bundle
import android.util.DisplayMetrics
import android.view.View
import androidx.appcompat.app.AppCompatActivity
import androidx.core.view.doOnLayout
import com.google.android.material.bottomsheet.BottomSheetBehavior
import kotlinx.android.synthetic.main.bottom_sheet_layout.bottom_sheet
import kotlinx.android.synthetic.main.bottom_sheet_layout.rv
import kotlinx.android.synthetic.main.bottom_sheet_layout.transaction_tv
import kotlinx.android.synthetic.main.content_main.bank_accounts_rv
import kotlinx.android.synthetic.main.content_main.home
import kotlinx.android.synthetic.main.content_main.main_layout

class MainActivity : AppCompatActivity() {

    private var peekHeight = 0
    private var bottomSheetOffset = 0
    private var transactionTitleWidth = 0f
    private var rvStartY = 0f
    private var homeStartY = 0f

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)
        setupViews()
    }

    private fun setupViews() {
        val bottomSheetBehaviour = BottomSheetBehavior.from(bottom_sheet)
        bottomSheetBehaviour.addBottomSheetCallback(object : BottomSheetBehavior.BottomSheetCallback() {
            override fun onSlide(bottomSheet: View, slideOffset: Float) {
                bank_accounts_rv.apply {
                    alpha = 1 - slideOffset
                    y = rvStartY * (1 - slideOffset * 5)
                }
                home.apply {
                    alpha = 1 - slideOffset
                    y = homeStartY * (1 - slideOffset * 10)
                }
                transaction_tv.x = slideOffset * (getScreenWidth() / 2 - transactionTitleWidth / 2)
                if (transaction_tv.x < getPixelsFromDp(16f)) {
                    transaction_tv.x = getPixelsFromDp(16f).toFloat()
                }

                bottom_sheet.background = bottomSheet.background.apply {
                    if (this is GradientDrawable)
                        cornerRadius = getPixelsFromDp(16f).toFloat() * (1 - slideOffset)
                }
            }

            override fun onStateChanged(bottomSheet: View, newState: Int) {
                // autogenerated
            }
        })
        rv.adapter = SimpleAdapter()
        bank_accounts_rv.adapter = BankAccountsAdapter()
        main_layout.doOnLayout {
            rvStartY = bank_accounts_rv.y
            peekHeight = getScreenHeight() -
                    getPixelsFromDp(16f) -
                    home.height -
                    getPixelsFromDp(16f) -
                    getPixelsFromDp(160f) -
                    getPixelsFromDp(16f)
            bottomSheetBehaviour.peekHeight = peekHeight
            bottomSheetOffset = getScreenHeight() - peekHeight
        }
        transaction_tv.doOnLayout {
            transactionTitleWidth = transaction_tv.width.toFloat()
        }

        bottom_sheet.background = GradientDrawable().apply {
            shape = GradientDrawable.RECTANGLE
            setColor(Color.WHITE)
            cornerRadius = getPixelsFromDp(16f).toFloat()
        }
        home.doOnLayout {
            homeStartY = home.y
        }

        bottom_sheet.maxHeight = getScreenHeight()
    }

    private fun getScreenHeight(): Int {
        val display = windowManager.defaultDisplay
        val size = Point()
        display.getSize(size)
        return size.y
    }

    private fun getScreenWidth(): Int {
        val display = windowManager.defaultDisplay
        val size = Point()
        display.getSize(size)
        return size.x
    }

    private fun getPixelsFromDp(dp: Float): Int {
        return (dp * (resources.displayMetrics.densityDpi.toFloat() / DisplayMetrics.DENSITY_DEFAULT)).toInt()
    }

    fun getDpFromPixels(px: Float): Float {
        return px / (resources.displayMetrics.densityDpi.toFloat() / DisplayMetrics.DENSITY_DEFAULT)
    }
}